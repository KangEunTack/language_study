java에서 사용하는 쓰레드 요소

 
```golang
package main

import (
	"fmt"
	"time"
)

func slicePrint1() {
	var slice1 = []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
	for _, value := range slice1 {
		time.Sleep(300 * time.Microsecond)
		fmt.Print(value)
	}
}

func slicePrint2() {
	var slice2 = []string{"가", "나", "다", "라", "마", "바", "사", "아", "자", "차"}
	for _, value := range slice2 {
		time.Sleep(300 * time.Microsecond)
		fmt.Print(value)
	}
}

func main() {

	slicePrint1()
	slicePrint2()
	println()
	go slicePrint1()
	go slicePrint2()

	//3초간에 시간을 주지 않으면 main()함수가 먼저 끝나버림
	//go를 쓰는순간 따로 논다.
	time.Sleep(3 * time.Second)
}

```
출력값

0123456789가나다라마바사아자차

 

0가나12다라34마바56사아78자차9

 

 

2.쓰래드 순서주기

하지만 방금과 같이 메인함수가 먼저 끝나버리지 말고 go루틴이 모두 종료된다음 main이 종료되게 하고싶다면

sync.WaitGroup을 사용한다

WaitGroup 에 개수를 정해주고 그갯수가 들어올때 까지 대기한다.
```golang
package main

import (
	"fmt"
	"sync"
)

var wg sync.WaitGroup

func printCount(a, b int) {
	sum := 0
	for i := a; i < b; i++ {
		sum += i
	}
	fmt.Printf("인자값은 = %d 반복할 값은 = %d  값에 합은 = %d", a, b, sum)
	fmt.Println()
	wg.Done()
}

func main() {
	wg.Add(10)

	for i := 0; i < 10; i++ {
		go printCount(i, 10000000)
	}

	wg.Wait()
}
```
출력값

인자값은 = 1 반복할 값은 = 10000000 값에 합은 = 49999995000000

인자값은 = 0 반복할 값은 = 10000000 값에 합은 = 49999995000000

인자값은 = 5 반복할 값은 = 10000000 값에 합은 = 49999994999990

인자값은 = 8 반복할 값은 = 10000000 값에 합은 = 49999994999972

인자값은 = 7 반복할 값은 = 10000000 값에 합은 = 49999994999979

인자값은 = 2 반복할 값은 = 10000000 값에 합은 = 49999994999999

인자값은 = 6 반복할 값은 = 10000000 값에 합은 = 49999994999985

인자값은 = 9 반복할 값은 = 10000000 값에 합은 = 49999994999964

인자값은 = 3 반복할 값은 = 10000000 값에 합은 = 49999994999997

인자값은 = 4 반복할 값은 = 10000000 값에 합은 = 49999994999994
